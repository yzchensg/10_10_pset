# -*- coding: utf-8 -*-
"""tenten.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_JY5W5DCnqe7Vb6cm6HLHmbThDwcS-ui
"""

def makematrix(func,N):
  """
  Numerical method for generating a matrix for a linear system of equations
  First b is determined by setting all variables values to 0
  then A is formed column by column by setting one variable at a time to 1

  It takes two input arguments
    1. the function name with the linear equations
    2. the number of unknowns (note number of equations can be different)

  It performs a couple of basic checks
    1. All-zero column, means you have an unneeded unknown or errors
    2. All-zero row, an unneeded equation or errors
    3. Linearity.  By testing a multiple, do you get the same multiple of the result vector
  """
  import numpy as np
  dummy = np.zeros(N) # initializing a vector with N elements
  b = -func(dummy)              # determine b
  m = len(b)                      # can have different equations != N
  print(f"# of equations m = {m} and # of unknowns N = {N}")
  if m != N:
    if m < N:
      print (f"too few equations for N = {N}")
    else:
      print ("too many equations for N")

  A = np.zeros((m,N))             # create a placeholder A with zeros
  for j in range(N):              # proceed columnwise for every unknown
    dummy = np.zeros(N)           # initializing dummy to all zeros
    dummy[j] = 1                  # setting unknown to 1
    A[:,j] = func(dummy) + b    # computing column j of A

    is_all_zeros = np.all(A[:,j] == 0)  # check - you don't want an all-zero column!
    if is_all_zeros:
      print(f"Bad matrix, column {j +1}  is all zeros.")

  for i in range(m):
    is_all_zeros = np.all(A[i,:] == 0)
    if is_all_zeros:
      print(f"Bad matrix, row {i+1} is all zeros.")    # another bad matrix check

  # a linearity test
  testlin1 = func(np.ones(N)) + b
  testlin2 = (func(10*np.ones(N)) + b)/10
  testlin = np.allclose(testlin1,testlin2,atol = 1e-10)
  if testlin == False:
    print ("function contains nonlinear equations")


  return A,b